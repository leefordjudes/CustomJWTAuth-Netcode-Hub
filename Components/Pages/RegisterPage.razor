

@page "/register"
@rendermode InteractiveServer

<div class="container">
    <div class="row">
        <dov class="col-sm-4">
            <h2>Register</h2>
            <EditForm Model="Register" OnValidSubmit="RegisterClicked">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label for="Email" class="form-label">Name</label>
                    <InputText @bind-Value="Register.Name" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label for="Email" class="form-label">Email Address</label>
                    <InputText @bind-Value="Register.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label for="Password" class="form-label">Password</label>
                    <InputText @bind-Value="Register.Password" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label for="Role" class="form-label">Role</label>
                    <InputText @bind-Value="Register.Role" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Register</button>
                </div>
                <ValidationSummary/>
            </EditForm>
        </dov>
    </div>
</div>


@code {
    public RegisterDTO Register = new();

    async Task RegisterClicked()
    {
        RegistrationResponse response = await accountService.RegisterAsync(Register);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }
        await js.InvokeVoidAsync("alert", response.Message);
        Register = new();
        return;
    }
    
}
























